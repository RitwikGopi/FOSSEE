
4_b.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000642  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000011  00000000  00000000  00000696  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000020  00000000  00000000  000006a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000235  00000000  00000000  000006c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000da  00000000  00000000  000008fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000012b  00000000  00000000  000009d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000038  00000000  00000000  00000b04  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000012f  00000000  00000000  00000b3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000047  00000000  00000000  00000c6b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000030  00000000  00000000  00000cb2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 1f 03 	jmp	0x63e	; 0x63e <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <avr/io.h>
#include <util/delay.h>
#define F_CPU 1000000

main(){
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
  74:	ae 97       	sbiw	r28, 0x2e	; 46
  76:	0f b6       	in	r0, 0x3f	; 63
  78:	f8 94       	cli
  7a:	de bf       	out	0x3e, r29	; 62
  7c:	0f be       	out	0x3f, r0	; 63
  7e:	cd bf       	out	0x3d, r28	; 61
	DDRB = 0xFF;
  80:	87 e3       	ldi	r24, 0x37	; 55
  82:	90 e0       	ldi	r25, 0x00	; 0
  84:	2f ef       	ldi	r18, 0xFF	; 255
  86:	fc 01       	movw	r30, r24
  88:	20 83       	st	Z, r18
	PORTB = 0x00;
  8a:	88 e3       	ldi	r24, 0x38	; 56
  8c:	90 e0       	ldi	r25, 0x00	; 0
  8e:	fc 01       	movw	r30, r24
  90:	10 82       	st	Z, r1
	DDRC = 0xFF;
  92:	84 e3       	ldi	r24, 0x34	; 52
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	2f ef       	ldi	r18, 0xFF	; 255
  98:	fc 01       	movw	r30, r24
  9a:	20 83       	st	Z, r18
	PORTC = 0x00;
  9c:	85 e3       	ldi	r24, 0x35	; 53
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	fc 01       	movw	r30, r24
  a2:	10 82       	st	Z, r1
	ADCSRA |= (1<<ADEN)|(1<<ADPS2);
  a4:	86 e2       	ldi	r24, 0x26	; 38
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	26 e2       	ldi	r18, 0x26	; 38
  aa:	30 e0       	ldi	r19, 0x00	; 0
  ac:	f9 01       	movw	r30, r18
  ae:	20 81       	ld	r18, Z
  b0:	24 68       	ori	r18, 0x84	; 132
  b2:	fc 01       	movw	r30, r24
  b4:	20 83       	st	Z, r18
	ADMUX |= (1<<REFS0);
  b6:	87 e2       	ldi	r24, 0x27	; 39
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	27 e2       	ldi	r18, 0x27	; 39
  bc:	30 e0       	ldi	r19, 0x00	; 0
  be:	f9 01       	movw	r30, r18
  c0:	20 81       	ld	r18, Z
  c2:	20 64       	ori	r18, 0x40	; 64
  c4:	fc 01       	movw	r30, r24
  c6:	20 83       	st	Z, r18
	UCSRB |= (1<<TXEN);
  c8:	8a e2       	ldi	r24, 0x2A	; 42
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	2a e2       	ldi	r18, 0x2A	; 42
  ce:	30 e0       	ldi	r19, 0x00	; 0
  d0:	f9 01       	movw	r30, r18
  d2:	20 81       	ld	r18, Z
  d4:	28 60       	ori	r18, 0x08	; 8
  d6:	fc 01       	movw	r30, r24
  d8:	20 83       	st	Z, r18
	UBRRH = 0x00;
  da:	80 e4       	ldi	r24, 0x40	; 64
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	fc 01       	movw	r30, r24
  e0:	10 82       	st	Z, r1
	UBRRL = 0x0C;
  e2:	89 e2       	ldi	r24, 0x29	; 41
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	2c e0       	ldi	r18, 0x0C	; 12
  e8:	fc 01       	movw	r30, r24
  ea:	20 83       	st	Z, r18
  ec:	80 e0       	ldi	r24, 0x00	; 0
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	a0 e8       	ldi	r26, 0x80	; 128
  f2:	bf e3       	ldi	r27, 0x3F	; 63
  f4:	8d 83       	std	Y+5, r24	; 0x05
  f6:	9e 83       	std	Y+6, r25	; 0x06
  f8:	af 83       	std	Y+7, r26	; 0x07
  fa:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
  fc:	20 e0       	ldi	r18, 0x00	; 0
  fe:	30 e0       	ldi	r19, 0x00	; 0
 100:	4a e7       	ldi	r20, 0x7A	; 122
 102:	53 e4       	ldi	r21, 0x43	; 67
 104:	6d 81       	ldd	r22, Y+5	; 0x05
 106:	7e 81       	ldd	r23, Y+6	; 0x06
 108:	8f 81       	ldd	r24, Y+7	; 0x07
 10a:	98 85       	ldd	r25, Y+8	; 0x08
 10c:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
 110:	dc 01       	movw	r26, r24
 112:	cb 01       	movw	r24, r22
 114:	89 87       	std	Y+9, r24	; 0x09
 116:	9a 87       	std	Y+10, r25	; 0x0a
 118:	ab 87       	std	Y+11, r26	; 0x0b
 11a:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
 11c:	20 e0       	ldi	r18, 0x00	; 0
 11e:	30 e0       	ldi	r19, 0x00	; 0
 120:	40 e8       	ldi	r20, 0x80	; 128
 122:	5f e3       	ldi	r21, 0x3F	; 63
 124:	69 85       	ldd	r22, Y+9	; 0x09
 126:	7a 85       	ldd	r23, Y+10	; 0x0a
 128:	8b 85       	ldd	r24, Y+11	; 0x0b
 12a:	9c 85       	ldd	r25, Y+12	; 0x0c
 12c:	0e 94 13 02 	call	0x426	; 0x426 <__cmpsf2>
 130:	88 23       	and	r24, r24
 132:	2c f4       	brge	.+10     	; 0x13e <main+0xd2>
		__ticks = 1;
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	9e 87       	std	Y+14, r25	; 0x0e
 13a:	8d 87       	std	Y+13, r24	; 0x0d
 13c:	3f c0       	rjmp	.+126    	; 0x1bc <main+0x150>
	else if (__tmp > 65535)
 13e:	20 e0       	ldi	r18, 0x00	; 0
 140:	3f ef       	ldi	r19, 0xFF	; 255
 142:	4f e7       	ldi	r20, 0x7F	; 127
 144:	57 e4       	ldi	r21, 0x47	; 71
 146:	69 85       	ldd	r22, Y+9	; 0x09
 148:	7a 85       	ldd	r23, Y+10	; 0x0a
 14a:	8b 85       	ldd	r24, Y+11	; 0x0b
 14c:	9c 85       	ldd	r25, Y+12	; 0x0c
 14e:	0e 94 90 02 	call	0x520	; 0x520 <__gesf2>
 152:	18 16       	cp	r1, r24
 154:	4c f5       	brge	.+82     	; 0x1a8 <main+0x13c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 156:	20 e0       	ldi	r18, 0x00	; 0
 158:	30 e0       	ldi	r19, 0x00	; 0
 15a:	40 e2       	ldi	r20, 0x20	; 32
 15c:	51 e4       	ldi	r21, 0x41	; 65
 15e:	6d 81       	ldd	r22, Y+5	; 0x05
 160:	7e 81       	ldd	r23, Y+6	; 0x06
 162:	8f 81       	ldd	r24, Y+7	; 0x07
 164:	98 85       	ldd	r25, Y+8	; 0x08
 166:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
 16a:	dc 01       	movw	r26, r24
 16c:	cb 01       	movw	r24, r22
 16e:	bc 01       	movw	r22, r24
 170:	cd 01       	movw	r24, r26
 172:	0e 94 17 02 	call	0x42e	; 0x42e <__fixunssfsi>
 176:	dc 01       	movw	r26, r24
 178:	cb 01       	movw	r24, r22
 17a:	9e 87       	std	Y+14, r25	; 0x0e
 17c:	8d 87       	std	Y+13, r24	; 0x0d
 17e:	0f c0       	rjmp	.+30     	; 0x19e <main+0x132>
 180:	89 e1       	ldi	r24, 0x19	; 25
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	98 8b       	std	Y+16, r25	; 0x10
 186:	8f 87       	std	Y+15, r24	; 0x0f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 188:	8f 85       	ldd	r24, Y+15	; 0x0f
 18a:	98 89       	ldd	r25, Y+16	; 0x10
 18c:	01 97       	sbiw	r24, 0x01	; 1
 18e:	f1 f7       	brne	.-4      	; 0x18c <main+0x120>
 190:	98 8b       	std	Y+16, r25	; 0x10
 192:	8f 87       	std	Y+15, r24	; 0x0f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 194:	8d 85       	ldd	r24, Y+13	; 0x0d
 196:	9e 85       	ldd	r25, Y+14	; 0x0e
 198:	01 97       	sbiw	r24, 0x01	; 1
 19a:	9e 87       	std	Y+14, r25	; 0x0e
 19c:	8d 87       	std	Y+13, r24	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 19e:	8d 85       	ldd	r24, Y+13	; 0x0d
 1a0:	9e 85       	ldd	r25, Y+14	; 0x0e
 1a2:	00 97       	sbiw	r24, 0x00	; 0
 1a4:	69 f7       	brne	.-38     	; 0x180 <main+0x114>
 1a6:	14 c0       	rjmp	.+40     	; 0x1d0 <main+0x164>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 1a8:	69 85       	ldd	r22, Y+9	; 0x09
 1aa:	7a 85       	ldd	r23, Y+10	; 0x0a
 1ac:	8b 85       	ldd	r24, Y+11	; 0x0b
 1ae:	9c 85       	ldd	r25, Y+12	; 0x0c
 1b0:	0e 94 17 02 	call	0x42e	; 0x42e <__fixunssfsi>
 1b4:	dc 01       	movw	r26, r24
 1b6:	cb 01       	movw	r24, r22
 1b8:	9e 87       	std	Y+14, r25	; 0x0e
 1ba:	8d 87       	std	Y+13, r24	; 0x0d
 1bc:	8d 85       	ldd	r24, Y+13	; 0x0d
 1be:	9e 85       	ldd	r25, Y+14	; 0x0e
 1c0:	9a 8b       	std	Y+18, r25	; 0x12
 1c2:	89 8b       	std	Y+17, r24	; 0x11
 1c4:	89 89       	ldd	r24, Y+17	; 0x11
 1c6:	9a 89       	ldd	r25, Y+18	; 0x12
 1c8:	01 97       	sbiw	r24, 0x01	; 1
 1ca:	f1 f7       	brne	.-4      	; 0x1c8 <main+0x15c>
 1cc:	9a 8b       	std	Y+18, r25	; 0x12
 1ce:	89 8b       	std	Y+17, r24	; 0x11
	_delay_ms(1);
	while(1){
		int valL,valH;
		ADCSRA |= (1<<ADSC);
 1d0:	86 e2       	ldi	r24, 0x26	; 38
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	26 e2       	ldi	r18, 0x26	; 38
 1d6:	30 e0       	ldi	r19, 0x00	; 0
 1d8:	f9 01       	movw	r30, r18
 1da:	20 81       	ld	r18, Z
 1dc:	20 64       	ori	r18, 0x40	; 64
 1de:	fc 01       	movw	r30, r24
 1e0:	20 83       	st	Z, r18
		while(ADCSRA & (1<<ADSC));
 1e2:	00 00       	nop
 1e4:	86 e2       	ldi	r24, 0x26	; 38
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	fc 01       	movw	r30, r24
 1ea:	80 81       	ld	r24, Z
 1ec:	88 2f       	mov	r24, r24
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	80 74       	andi	r24, 0x40	; 64
 1f2:	99 27       	eor	r25, r25
 1f4:	00 97       	sbiw	r24, 0x00	; 0
 1f6:	b1 f7       	brne	.-20     	; 0x1e4 <main+0x178>
		valL = ADCL;
 1f8:	84 e2       	ldi	r24, 0x24	; 36
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	fc 01       	movw	r30, r24
 1fe:	80 81       	ld	r24, Z
 200:	88 2f       	mov	r24, r24
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	9a 83       	std	Y+2, r25	; 0x02
 206:	89 83       	std	Y+1, r24	; 0x01
		valH = ADCH;
 208:	85 e2       	ldi	r24, 0x25	; 37
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	fc 01       	movw	r30, r24
 20e:	80 81       	ld	r24, Z
 210:	88 2f       	mov	r24, r24
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	9c 83       	std	Y+4, r25	; 0x04
 216:	8b 83       	std	Y+3, r24	; 0x03
		PORTB = valL;
 218:	88 e3       	ldi	r24, 0x38	; 56
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	29 81       	ldd	r18, Y+1	; 0x01
 21e:	fc 01       	movw	r30, r24
 220:	20 83       	st	Z, r18
		PORTC = valH;
 222:	85 e3       	ldi	r24, 0x35	; 53
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	2b 81       	ldd	r18, Y+3	; 0x03
 228:	fc 01       	movw	r30, r24
 22a:	20 83       	st	Z, r18
		UDR = valL;
 22c:	8c e2       	ldi	r24, 0x2C	; 44
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	29 81       	ldd	r18, Y+1	; 0x01
 232:	fc 01       	movw	r30, r24
 234:	20 83       	st	Z, r18
		while(!(UCSRA&&(1<<TXC)));
 236:	00 00       	nop
 238:	8b e2       	ldi	r24, 0x2B	; 43
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	fc 01       	movw	r30, r24
 23e:	80 81       	ld	r24, Z
 240:	88 23       	and	r24, r24
 242:	d1 f3       	breq	.-12     	; 0x238 <main+0x1cc>
 244:	80 e0       	ldi	r24, 0x00	; 0
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	a0 e8       	ldi	r26, 0x80	; 128
 24a:	bf e3       	ldi	r27, 0x3F	; 63
 24c:	8b 8b       	std	Y+19, r24	; 0x13
 24e:	9c 8b       	std	Y+20, r25	; 0x14
 250:	ad 8b       	std	Y+21, r26	; 0x15
 252:	be 8b       	std	Y+22, r27	; 0x16

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 254:	20 e0       	ldi	r18, 0x00	; 0
 256:	30 e0       	ldi	r19, 0x00	; 0
 258:	4a e7       	ldi	r20, 0x7A	; 122
 25a:	53 e4       	ldi	r21, 0x43	; 67
 25c:	6b 89       	ldd	r22, Y+19	; 0x13
 25e:	7c 89       	ldd	r23, Y+20	; 0x14
 260:	8d 89       	ldd	r24, Y+21	; 0x15
 262:	9e 89       	ldd	r25, Y+22	; 0x16
 264:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
 268:	dc 01       	movw	r26, r24
 26a:	cb 01       	movw	r24, r22
 26c:	8f 8b       	std	Y+23, r24	; 0x17
 26e:	98 8f       	std	Y+24, r25	; 0x18
 270:	a9 8f       	std	Y+25, r26	; 0x19
 272:	ba 8f       	std	Y+26, r27	; 0x1a
	if (__tmp < 1.0)
 274:	20 e0       	ldi	r18, 0x00	; 0
 276:	30 e0       	ldi	r19, 0x00	; 0
 278:	40 e8       	ldi	r20, 0x80	; 128
 27a:	5f e3       	ldi	r21, 0x3F	; 63
 27c:	6f 89       	ldd	r22, Y+23	; 0x17
 27e:	78 8d       	ldd	r23, Y+24	; 0x18
 280:	89 8d       	ldd	r24, Y+25	; 0x19
 282:	9a 8d       	ldd	r25, Y+26	; 0x1a
 284:	0e 94 13 02 	call	0x426	; 0x426 <__cmpsf2>
 288:	88 23       	and	r24, r24
 28a:	2c f4       	brge	.+10     	; 0x296 <main+0x22a>
		__ticks = 1;
 28c:	81 e0       	ldi	r24, 0x01	; 1
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	9c 8f       	std	Y+28, r25	; 0x1c
 292:	8b 8f       	std	Y+27, r24	; 0x1b
 294:	3f c0       	rjmp	.+126    	; 0x314 <main+0x2a8>
	else if (__tmp > 65535)
 296:	20 e0       	ldi	r18, 0x00	; 0
 298:	3f ef       	ldi	r19, 0xFF	; 255
 29a:	4f e7       	ldi	r20, 0x7F	; 127
 29c:	57 e4       	ldi	r21, 0x47	; 71
 29e:	6f 89       	ldd	r22, Y+23	; 0x17
 2a0:	78 8d       	ldd	r23, Y+24	; 0x18
 2a2:	89 8d       	ldd	r24, Y+25	; 0x19
 2a4:	9a 8d       	ldd	r25, Y+26	; 0x1a
 2a6:	0e 94 90 02 	call	0x520	; 0x520 <__gesf2>
 2aa:	18 16       	cp	r1, r24
 2ac:	4c f5       	brge	.+82     	; 0x300 <main+0x294>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 2ae:	20 e0       	ldi	r18, 0x00	; 0
 2b0:	30 e0       	ldi	r19, 0x00	; 0
 2b2:	40 e2       	ldi	r20, 0x20	; 32
 2b4:	51 e4       	ldi	r21, 0x41	; 65
 2b6:	6b 89       	ldd	r22, Y+19	; 0x13
 2b8:	7c 89       	ldd	r23, Y+20	; 0x14
 2ba:	8d 89       	ldd	r24, Y+21	; 0x15
 2bc:	9e 89       	ldd	r25, Y+22	; 0x16
 2be:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
 2c2:	dc 01       	movw	r26, r24
 2c4:	cb 01       	movw	r24, r22
 2c6:	bc 01       	movw	r22, r24
 2c8:	cd 01       	movw	r24, r26
 2ca:	0e 94 17 02 	call	0x42e	; 0x42e <__fixunssfsi>
 2ce:	dc 01       	movw	r26, r24
 2d0:	cb 01       	movw	r24, r22
 2d2:	9c 8f       	std	Y+28, r25	; 0x1c
 2d4:	8b 8f       	std	Y+27, r24	; 0x1b
 2d6:	0f c0       	rjmp	.+30     	; 0x2f6 <main+0x28a>
 2d8:	89 e1       	ldi	r24, 0x19	; 25
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	9e 8f       	std	Y+30, r25	; 0x1e
 2de:	8d 8f       	std	Y+29, r24	; 0x1d
 2e0:	8d 8d       	ldd	r24, Y+29	; 0x1d
 2e2:	9e 8d       	ldd	r25, Y+30	; 0x1e
 2e4:	01 97       	sbiw	r24, 0x01	; 1
 2e6:	f1 f7       	brne	.-4      	; 0x2e4 <main+0x278>
 2e8:	9e 8f       	std	Y+30, r25	; 0x1e
 2ea:	8d 8f       	std	Y+29, r24	; 0x1d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
 2ee:	9c 8d       	ldd	r25, Y+28	; 0x1c
 2f0:	01 97       	sbiw	r24, 0x01	; 1
 2f2:	9c 8f       	std	Y+28, r25	; 0x1c
 2f4:	8b 8f       	std	Y+27, r24	; 0x1b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2f6:	8b 8d       	ldd	r24, Y+27	; 0x1b
 2f8:	9c 8d       	ldd	r25, Y+28	; 0x1c
 2fa:	00 97       	sbiw	r24, 0x00	; 0
 2fc:	69 f7       	brne	.-38     	; 0x2d8 <main+0x26c>
 2fe:	14 c0       	rjmp	.+40     	; 0x328 <main+0x2bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 300:	6f 89       	ldd	r22, Y+23	; 0x17
 302:	78 8d       	ldd	r23, Y+24	; 0x18
 304:	89 8d       	ldd	r24, Y+25	; 0x19
 306:	9a 8d       	ldd	r25, Y+26	; 0x1a
 308:	0e 94 17 02 	call	0x42e	; 0x42e <__fixunssfsi>
 30c:	dc 01       	movw	r26, r24
 30e:	cb 01       	movw	r24, r22
 310:	9c 8f       	std	Y+28, r25	; 0x1c
 312:	8b 8f       	std	Y+27, r24	; 0x1b
 314:	8b 8d       	ldd	r24, Y+27	; 0x1b
 316:	9c 8d       	ldd	r25, Y+28	; 0x1c
 318:	98 a3       	std	Y+32, r25	; 0x20
 31a:	8f 8f       	std	Y+31, r24	; 0x1f
 31c:	8f 8d       	ldd	r24, Y+31	; 0x1f
 31e:	98 a1       	ldd	r25, Y+32	; 0x20
 320:	01 97       	sbiw	r24, 0x01	; 1
 322:	f1 f7       	brne	.-4      	; 0x320 <main+0x2b4>
 324:	98 a3       	std	Y+32, r25	; 0x20
 326:	8f 8f       	std	Y+31, r24	; 0x1f
		_delay_ms(1);
		UDR = valH;
 328:	8c e2       	ldi	r24, 0x2C	; 44
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	2b 81       	ldd	r18, Y+3	; 0x03
 32e:	fc 01       	movw	r30, r24
 330:	20 83       	st	Z, r18
		while(!(UCSRA&&(1<<TXC)));
 332:	00 00       	nop
 334:	8b e2       	ldi	r24, 0x2B	; 43
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	fc 01       	movw	r30, r24
 33a:	80 81       	ld	r24, Z
 33c:	88 23       	and	r24, r24
 33e:	d1 f3       	breq	.-12     	; 0x334 <main+0x2c8>
 340:	80 e0       	ldi	r24, 0x00	; 0
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	a0 e8       	ldi	r26, 0x80	; 128
 346:	bf e3       	ldi	r27, 0x3F	; 63
 348:	89 a3       	std	Y+33, r24	; 0x21
 34a:	9a a3       	std	Y+34, r25	; 0x22
 34c:	ab a3       	std	Y+35, r26	; 0x23
 34e:	bc a3       	std	Y+36, r27	; 0x24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 350:	20 e0       	ldi	r18, 0x00	; 0
 352:	30 e0       	ldi	r19, 0x00	; 0
 354:	4a e7       	ldi	r20, 0x7A	; 122
 356:	53 e4       	ldi	r21, 0x43	; 67
 358:	69 a1       	ldd	r22, Y+33	; 0x21
 35a:	7a a1       	ldd	r23, Y+34	; 0x22
 35c:	8b a1       	ldd	r24, Y+35	; 0x23
 35e:	9c a1       	ldd	r25, Y+36	; 0x24
 360:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
 364:	dc 01       	movw	r26, r24
 366:	cb 01       	movw	r24, r22
 368:	8d a3       	std	Y+37, r24	; 0x25
 36a:	9e a3       	std	Y+38, r25	; 0x26
 36c:	af a3       	std	Y+39, r26	; 0x27
 36e:	b8 a7       	std	Y+40, r27	; 0x28
	if (__tmp < 1.0)
 370:	20 e0       	ldi	r18, 0x00	; 0
 372:	30 e0       	ldi	r19, 0x00	; 0
 374:	40 e8       	ldi	r20, 0x80	; 128
 376:	5f e3       	ldi	r21, 0x3F	; 63
 378:	6d a1       	ldd	r22, Y+37	; 0x25
 37a:	7e a1       	ldd	r23, Y+38	; 0x26
 37c:	8f a1       	ldd	r24, Y+39	; 0x27
 37e:	98 a5       	ldd	r25, Y+40	; 0x28
 380:	0e 94 13 02 	call	0x426	; 0x426 <__cmpsf2>
 384:	88 23       	and	r24, r24
 386:	2c f4       	brge	.+10     	; 0x392 <main+0x326>
		__ticks = 1;
 388:	81 e0       	ldi	r24, 0x01	; 1
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	9a a7       	std	Y+42, r25	; 0x2a
 38e:	89 a7       	std	Y+41, r24	; 0x29
 390:	3f c0       	rjmp	.+126    	; 0x410 <main+0x3a4>
	else if (__tmp > 65535)
 392:	20 e0       	ldi	r18, 0x00	; 0
 394:	3f ef       	ldi	r19, 0xFF	; 255
 396:	4f e7       	ldi	r20, 0x7F	; 127
 398:	57 e4       	ldi	r21, 0x47	; 71
 39a:	6d a1       	ldd	r22, Y+37	; 0x25
 39c:	7e a1       	ldd	r23, Y+38	; 0x26
 39e:	8f a1       	ldd	r24, Y+39	; 0x27
 3a0:	98 a5       	ldd	r25, Y+40	; 0x28
 3a2:	0e 94 90 02 	call	0x520	; 0x520 <__gesf2>
 3a6:	18 16       	cp	r1, r24
 3a8:	4c f5       	brge	.+82     	; 0x3fc <main+0x390>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 3aa:	20 e0       	ldi	r18, 0x00	; 0
 3ac:	30 e0       	ldi	r19, 0x00	; 0
 3ae:	40 e2       	ldi	r20, 0x20	; 32
 3b0:	51 e4       	ldi	r21, 0x41	; 65
 3b2:	69 a1       	ldd	r22, Y+33	; 0x21
 3b4:	7a a1       	ldd	r23, Y+34	; 0x22
 3b6:	8b a1       	ldd	r24, Y+35	; 0x23
 3b8:	9c a1       	ldd	r25, Y+36	; 0x24
 3ba:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
 3be:	dc 01       	movw	r26, r24
 3c0:	cb 01       	movw	r24, r22
 3c2:	bc 01       	movw	r22, r24
 3c4:	cd 01       	movw	r24, r26
 3c6:	0e 94 17 02 	call	0x42e	; 0x42e <__fixunssfsi>
 3ca:	dc 01       	movw	r26, r24
 3cc:	cb 01       	movw	r24, r22
 3ce:	9a a7       	std	Y+42, r25	; 0x2a
 3d0:	89 a7       	std	Y+41, r24	; 0x29
 3d2:	0f c0       	rjmp	.+30     	; 0x3f2 <main+0x386>
 3d4:	89 e1       	ldi	r24, 0x19	; 25
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	9c a7       	std	Y+44, r25	; 0x2c
 3da:	8b a7       	std	Y+43, r24	; 0x2b
 3dc:	8b a5       	ldd	r24, Y+43	; 0x2b
 3de:	9c a5       	ldd	r25, Y+44	; 0x2c
 3e0:	01 97       	sbiw	r24, 0x01	; 1
 3e2:	f1 f7       	brne	.-4      	; 0x3e0 <main+0x374>
 3e4:	9c a7       	std	Y+44, r25	; 0x2c
 3e6:	8b a7       	std	Y+43, r24	; 0x2b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 3e8:	89 a5       	ldd	r24, Y+41	; 0x29
 3ea:	9a a5       	ldd	r25, Y+42	; 0x2a
 3ec:	01 97       	sbiw	r24, 0x01	; 1
 3ee:	9a a7       	std	Y+42, r25	; 0x2a
 3f0:	89 a7       	std	Y+41, r24	; 0x29
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 3f2:	89 a5       	ldd	r24, Y+41	; 0x29
 3f4:	9a a5       	ldd	r25, Y+42	; 0x2a
 3f6:	00 97       	sbiw	r24, 0x00	; 0
 3f8:	69 f7       	brne	.-38     	; 0x3d4 <main+0x368>
		_delay_ms(1);
	}
 3fa:	ea ce       	rjmp	.-556    	; 0x1d0 <main+0x164>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 3fc:	6d a1       	ldd	r22, Y+37	; 0x25
 3fe:	7e a1       	ldd	r23, Y+38	; 0x26
 400:	8f a1       	ldd	r24, Y+39	; 0x27
 402:	98 a5       	ldd	r25, Y+40	; 0x28
 404:	0e 94 17 02 	call	0x42e	; 0x42e <__fixunssfsi>
 408:	dc 01       	movw	r26, r24
 40a:	cb 01       	movw	r24, r22
 40c:	9a a7       	std	Y+42, r25	; 0x2a
 40e:	89 a7       	std	Y+41, r24	; 0x29
 410:	89 a5       	ldd	r24, Y+41	; 0x29
 412:	9a a5       	ldd	r25, Y+42	; 0x2a
 414:	9e a7       	std	Y+46, r25	; 0x2e
 416:	8d a7       	std	Y+45, r24	; 0x2d
 418:	8d a5       	ldd	r24, Y+45	; 0x2d
 41a:	9e a5       	ldd	r25, Y+46	; 0x2e
 41c:	01 97       	sbiw	r24, 0x01	; 1
 41e:	f1 f7       	brne	.-4      	; 0x41c <main+0x3b0>
 420:	9e a7       	std	Y+46, r25	; 0x2e
 422:	8d a7       	std	Y+45, r24	; 0x2d
 424:	d5 ce       	rjmp	.-598    	; 0x1d0 <main+0x164>

00000426 <__cmpsf2>:
 426:	2f d0       	rcall	.+94     	; 0x486 <__fp_cmp>
 428:	08 f4       	brcc	.+2      	; 0x42c <__cmpsf2+0x6>
 42a:	81 e0       	ldi	r24, 0x01	; 1
 42c:	08 95       	ret

0000042e <__fixunssfsi>:
 42e:	57 d0       	rcall	.+174    	; 0x4de <__fp_splitA>
 430:	88 f0       	brcs	.+34     	; 0x454 <__fixunssfsi+0x26>
 432:	9f 57       	subi	r25, 0x7F	; 127
 434:	90 f0       	brcs	.+36     	; 0x45a <__fixunssfsi+0x2c>
 436:	b9 2f       	mov	r27, r25
 438:	99 27       	eor	r25, r25
 43a:	b7 51       	subi	r27, 0x17	; 23
 43c:	a0 f0       	brcs	.+40     	; 0x466 <__stack+0x7>
 43e:	d1 f0       	breq	.+52     	; 0x474 <__stack+0x15>
 440:	66 0f       	add	r22, r22
 442:	77 1f       	adc	r23, r23
 444:	88 1f       	adc	r24, r24
 446:	99 1f       	adc	r25, r25
 448:	1a f0       	brmi	.+6      	; 0x450 <__fixunssfsi+0x22>
 44a:	ba 95       	dec	r27
 44c:	c9 f7       	brne	.-14     	; 0x440 <__fixunssfsi+0x12>
 44e:	12 c0       	rjmp	.+36     	; 0x474 <__stack+0x15>
 450:	b1 30       	cpi	r27, 0x01	; 1
 452:	81 f0       	breq	.+32     	; 0x474 <__stack+0x15>
 454:	5e d0       	rcall	.+188    	; 0x512 <__fp_zero>
 456:	b1 e0       	ldi	r27, 0x01	; 1
 458:	08 95       	ret
 45a:	5b c0       	rjmp	.+182    	; 0x512 <__fp_zero>
 45c:	67 2f       	mov	r22, r23
 45e:	78 2f       	mov	r23, r24
 460:	88 27       	eor	r24, r24
 462:	b8 5f       	subi	r27, 0xF8	; 248
 464:	39 f0       	breq	.+14     	; 0x474 <__stack+0x15>
 466:	b9 3f       	cpi	r27, 0xF9	; 249
 468:	cc f3       	brlt	.-14     	; 0x45c <__fixunssfsi+0x2e>
 46a:	86 95       	lsr	r24
 46c:	77 95       	ror	r23
 46e:	67 95       	ror	r22
 470:	b3 95       	inc	r27
 472:	d9 f7       	brne	.-10     	; 0x46a <__stack+0xb>
 474:	3e f4       	brtc	.+14     	; 0x484 <__stack+0x25>
 476:	90 95       	com	r25
 478:	80 95       	com	r24
 47a:	70 95       	com	r23
 47c:	61 95       	neg	r22
 47e:	7f 4f       	sbci	r23, 0xFF	; 255
 480:	8f 4f       	sbci	r24, 0xFF	; 255
 482:	9f 4f       	sbci	r25, 0xFF	; 255
 484:	08 95       	ret

00000486 <__fp_cmp>:
 486:	99 0f       	add	r25, r25
 488:	00 08       	sbc	r0, r0
 48a:	55 0f       	add	r21, r21
 48c:	aa 0b       	sbc	r26, r26
 48e:	e0 e8       	ldi	r30, 0x80	; 128
 490:	fe ef       	ldi	r31, 0xFE	; 254
 492:	16 16       	cp	r1, r22
 494:	17 06       	cpc	r1, r23
 496:	e8 07       	cpc	r30, r24
 498:	f9 07       	cpc	r31, r25
 49a:	c0 f0       	brcs	.+48     	; 0x4cc <__fp_cmp+0x46>
 49c:	12 16       	cp	r1, r18
 49e:	13 06       	cpc	r1, r19
 4a0:	e4 07       	cpc	r30, r20
 4a2:	f5 07       	cpc	r31, r21
 4a4:	98 f0       	brcs	.+38     	; 0x4cc <__fp_cmp+0x46>
 4a6:	62 1b       	sub	r22, r18
 4a8:	73 0b       	sbc	r23, r19
 4aa:	84 0b       	sbc	r24, r20
 4ac:	95 0b       	sbc	r25, r21
 4ae:	39 f4       	brne	.+14     	; 0x4be <__fp_cmp+0x38>
 4b0:	0a 26       	eor	r0, r26
 4b2:	61 f0       	breq	.+24     	; 0x4cc <__fp_cmp+0x46>
 4b4:	23 2b       	or	r18, r19
 4b6:	24 2b       	or	r18, r20
 4b8:	25 2b       	or	r18, r21
 4ba:	21 f4       	brne	.+8      	; 0x4c4 <__fp_cmp+0x3e>
 4bc:	08 95       	ret
 4be:	0a 26       	eor	r0, r26
 4c0:	09 f4       	brne	.+2      	; 0x4c4 <__fp_cmp+0x3e>
 4c2:	a1 40       	sbci	r26, 0x01	; 1
 4c4:	a6 95       	lsr	r26
 4c6:	8f ef       	ldi	r24, 0xFF	; 255
 4c8:	81 1d       	adc	r24, r1
 4ca:	81 1d       	adc	r24, r1
 4cc:	08 95       	ret

000004ce <__fp_split3>:
 4ce:	57 fd       	sbrc	r21, 7
 4d0:	90 58       	subi	r25, 0x80	; 128
 4d2:	44 0f       	add	r20, r20
 4d4:	55 1f       	adc	r21, r21
 4d6:	59 f0       	breq	.+22     	; 0x4ee <__fp_splitA+0x10>
 4d8:	5f 3f       	cpi	r21, 0xFF	; 255
 4da:	71 f0       	breq	.+28     	; 0x4f8 <__fp_splitA+0x1a>
 4dc:	47 95       	ror	r20

000004de <__fp_splitA>:
 4de:	88 0f       	add	r24, r24
 4e0:	97 fb       	bst	r25, 7
 4e2:	99 1f       	adc	r25, r25
 4e4:	61 f0       	breq	.+24     	; 0x4fe <__fp_splitA+0x20>
 4e6:	9f 3f       	cpi	r25, 0xFF	; 255
 4e8:	79 f0       	breq	.+30     	; 0x508 <__fp_splitA+0x2a>
 4ea:	87 95       	ror	r24
 4ec:	08 95       	ret
 4ee:	12 16       	cp	r1, r18
 4f0:	13 06       	cpc	r1, r19
 4f2:	14 06       	cpc	r1, r20
 4f4:	55 1f       	adc	r21, r21
 4f6:	f2 cf       	rjmp	.-28     	; 0x4dc <__fp_split3+0xe>
 4f8:	46 95       	lsr	r20
 4fa:	f1 df       	rcall	.-30     	; 0x4de <__fp_splitA>
 4fc:	08 c0       	rjmp	.+16     	; 0x50e <__fp_splitA+0x30>
 4fe:	16 16       	cp	r1, r22
 500:	17 06       	cpc	r1, r23
 502:	18 06       	cpc	r1, r24
 504:	99 1f       	adc	r25, r25
 506:	f1 cf       	rjmp	.-30     	; 0x4ea <__fp_splitA+0xc>
 508:	86 95       	lsr	r24
 50a:	71 05       	cpc	r23, r1
 50c:	61 05       	cpc	r22, r1
 50e:	08 94       	sec
 510:	08 95       	ret

00000512 <__fp_zero>:
 512:	e8 94       	clt

00000514 <__fp_szero>:
 514:	bb 27       	eor	r27, r27
 516:	66 27       	eor	r22, r22
 518:	77 27       	eor	r23, r23
 51a:	cb 01       	movw	r24, r22
 51c:	97 f9       	bld	r25, 7
 51e:	08 95       	ret

00000520 <__gesf2>:
 520:	b2 df       	rcall	.-156    	; 0x486 <__fp_cmp>
 522:	08 f4       	brcc	.+2      	; 0x526 <__gesf2+0x6>
 524:	8f ef       	ldi	r24, 0xFF	; 255
 526:	08 95       	ret

00000528 <__mulsf3>:
 528:	0b d0       	rcall	.+22     	; 0x540 <__mulsf3x>
 52a:	78 c0       	rjmp	.+240    	; 0x61c <__fp_round>
 52c:	69 d0       	rcall	.+210    	; 0x600 <__fp_pscA>
 52e:	28 f0       	brcs	.+10     	; 0x53a <__mulsf3+0x12>
 530:	6e d0       	rcall	.+220    	; 0x60e <__fp_pscB>
 532:	18 f0       	brcs	.+6      	; 0x53a <__mulsf3+0x12>
 534:	95 23       	and	r25, r21
 536:	09 f0       	breq	.+2      	; 0x53a <__mulsf3+0x12>
 538:	5a c0       	rjmp	.+180    	; 0x5ee <__fp_inf>
 53a:	5f c0       	rjmp	.+190    	; 0x5fa <__fp_nan>
 53c:	11 24       	eor	r1, r1
 53e:	ea cf       	rjmp	.-44     	; 0x514 <__fp_szero>

00000540 <__mulsf3x>:
 540:	c6 df       	rcall	.-116    	; 0x4ce <__fp_split3>
 542:	a0 f3       	brcs	.-24     	; 0x52c <__mulsf3+0x4>

00000544 <__mulsf3_pse>:
 544:	95 9f       	mul	r25, r21
 546:	d1 f3       	breq	.-12     	; 0x53c <__mulsf3+0x14>
 548:	95 0f       	add	r25, r21
 54a:	50 e0       	ldi	r21, 0x00	; 0
 54c:	55 1f       	adc	r21, r21
 54e:	62 9f       	mul	r22, r18
 550:	f0 01       	movw	r30, r0
 552:	72 9f       	mul	r23, r18
 554:	bb 27       	eor	r27, r27
 556:	f0 0d       	add	r31, r0
 558:	b1 1d       	adc	r27, r1
 55a:	63 9f       	mul	r22, r19
 55c:	aa 27       	eor	r26, r26
 55e:	f0 0d       	add	r31, r0
 560:	b1 1d       	adc	r27, r1
 562:	aa 1f       	adc	r26, r26
 564:	64 9f       	mul	r22, r20
 566:	66 27       	eor	r22, r22
 568:	b0 0d       	add	r27, r0
 56a:	a1 1d       	adc	r26, r1
 56c:	66 1f       	adc	r22, r22
 56e:	82 9f       	mul	r24, r18
 570:	22 27       	eor	r18, r18
 572:	b0 0d       	add	r27, r0
 574:	a1 1d       	adc	r26, r1
 576:	62 1f       	adc	r22, r18
 578:	73 9f       	mul	r23, r19
 57a:	b0 0d       	add	r27, r0
 57c:	a1 1d       	adc	r26, r1
 57e:	62 1f       	adc	r22, r18
 580:	83 9f       	mul	r24, r19
 582:	a0 0d       	add	r26, r0
 584:	61 1d       	adc	r22, r1
 586:	22 1f       	adc	r18, r18
 588:	74 9f       	mul	r23, r20
 58a:	33 27       	eor	r19, r19
 58c:	a0 0d       	add	r26, r0
 58e:	61 1d       	adc	r22, r1
 590:	23 1f       	adc	r18, r19
 592:	84 9f       	mul	r24, r20
 594:	60 0d       	add	r22, r0
 596:	21 1d       	adc	r18, r1
 598:	82 2f       	mov	r24, r18
 59a:	76 2f       	mov	r23, r22
 59c:	6a 2f       	mov	r22, r26
 59e:	11 24       	eor	r1, r1
 5a0:	9f 57       	subi	r25, 0x7F	; 127
 5a2:	50 40       	sbci	r21, 0x00	; 0
 5a4:	8a f0       	brmi	.+34     	; 0x5c8 <__mulsf3_pse+0x84>
 5a6:	e1 f0       	breq	.+56     	; 0x5e0 <__mulsf3_pse+0x9c>
 5a8:	88 23       	and	r24, r24
 5aa:	4a f0       	brmi	.+18     	; 0x5be <__mulsf3_pse+0x7a>
 5ac:	ee 0f       	add	r30, r30
 5ae:	ff 1f       	adc	r31, r31
 5b0:	bb 1f       	adc	r27, r27
 5b2:	66 1f       	adc	r22, r22
 5b4:	77 1f       	adc	r23, r23
 5b6:	88 1f       	adc	r24, r24
 5b8:	91 50       	subi	r25, 0x01	; 1
 5ba:	50 40       	sbci	r21, 0x00	; 0
 5bc:	a9 f7       	brne	.-22     	; 0x5a8 <__mulsf3_pse+0x64>
 5be:	9e 3f       	cpi	r25, 0xFE	; 254
 5c0:	51 05       	cpc	r21, r1
 5c2:	70 f0       	brcs	.+28     	; 0x5e0 <__mulsf3_pse+0x9c>
 5c4:	14 c0       	rjmp	.+40     	; 0x5ee <__fp_inf>
 5c6:	a6 cf       	rjmp	.-180    	; 0x514 <__fp_szero>
 5c8:	5f 3f       	cpi	r21, 0xFF	; 255
 5ca:	ec f3       	brlt	.-6      	; 0x5c6 <__mulsf3_pse+0x82>
 5cc:	98 3e       	cpi	r25, 0xE8	; 232
 5ce:	dc f3       	brlt	.-10     	; 0x5c6 <__mulsf3_pse+0x82>
 5d0:	86 95       	lsr	r24
 5d2:	77 95       	ror	r23
 5d4:	67 95       	ror	r22
 5d6:	b7 95       	ror	r27
 5d8:	f7 95       	ror	r31
 5da:	e7 95       	ror	r30
 5dc:	9f 5f       	subi	r25, 0xFF	; 255
 5de:	c1 f7       	brne	.-16     	; 0x5d0 <__mulsf3_pse+0x8c>
 5e0:	fe 2b       	or	r31, r30
 5e2:	88 0f       	add	r24, r24
 5e4:	91 1d       	adc	r25, r1
 5e6:	96 95       	lsr	r25
 5e8:	87 95       	ror	r24
 5ea:	97 f9       	bld	r25, 7
 5ec:	08 95       	ret

000005ee <__fp_inf>:
 5ee:	97 f9       	bld	r25, 7
 5f0:	9f 67       	ori	r25, 0x7F	; 127
 5f2:	80 e8       	ldi	r24, 0x80	; 128
 5f4:	70 e0       	ldi	r23, 0x00	; 0
 5f6:	60 e0       	ldi	r22, 0x00	; 0
 5f8:	08 95       	ret

000005fa <__fp_nan>:
 5fa:	9f ef       	ldi	r25, 0xFF	; 255
 5fc:	80 ec       	ldi	r24, 0xC0	; 192
 5fe:	08 95       	ret

00000600 <__fp_pscA>:
 600:	00 24       	eor	r0, r0
 602:	0a 94       	dec	r0
 604:	16 16       	cp	r1, r22
 606:	17 06       	cpc	r1, r23
 608:	18 06       	cpc	r1, r24
 60a:	09 06       	cpc	r0, r25
 60c:	08 95       	ret

0000060e <__fp_pscB>:
 60e:	00 24       	eor	r0, r0
 610:	0a 94       	dec	r0
 612:	12 16       	cp	r1, r18
 614:	13 06       	cpc	r1, r19
 616:	14 06       	cpc	r1, r20
 618:	05 06       	cpc	r0, r21
 61a:	08 95       	ret

0000061c <__fp_round>:
 61c:	09 2e       	mov	r0, r25
 61e:	03 94       	inc	r0
 620:	00 0c       	add	r0, r0
 622:	11 f4       	brne	.+4      	; 0x628 <__fp_round+0xc>
 624:	88 23       	and	r24, r24
 626:	52 f0       	brmi	.+20     	; 0x63c <__fp_round+0x20>
 628:	bb 0f       	add	r27, r27
 62a:	40 f4       	brcc	.+16     	; 0x63c <__fp_round+0x20>
 62c:	bf 2b       	or	r27, r31
 62e:	11 f4       	brne	.+4      	; 0x634 <__fp_round+0x18>
 630:	60 ff       	sbrs	r22, 0
 632:	04 c0       	rjmp	.+8      	; 0x63c <__fp_round+0x20>
 634:	6f 5f       	subi	r22, 0xFF	; 255
 636:	7f 4f       	sbci	r23, 0xFF	; 255
 638:	8f 4f       	sbci	r24, 0xFF	; 255
 63a:	9f 4f       	sbci	r25, 0xFF	; 255
 63c:	08 95       	ret

0000063e <_exit>:
 63e:	f8 94       	cli

00000640 <__stop_program>:
 640:	ff cf       	rjmp	.-2      	; 0x640 <__stop_program>
