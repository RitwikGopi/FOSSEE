
4_a.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000011  00000000  00000000  00000116  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000020  00000000  00000000  00000127  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000082  00000000  00000000  00000147  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000004f  00000000  00000000  000001c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000059  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000034  00000000  00000000  00000274  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000e2  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000003b  00000000  00000000  0000038a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 5f 00 	jmp	0xbe	; 0xbe <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <avr/io.h>
#define F_CPU 1000000

main(){
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
	DDRC &= ~(1<<0);
  74:	84 e3       	ldi	r24, 0x34	; 52
  76:	90 e0       	ldi	r25, 0x00	; 0
  78:	24 e3       	ldi	r18, 0x34	; 52
  7a:	30 e0       	ldi	r19, 0x00	; 0
  7c:	f9 01       	movw	r30, r18
  7e:	20 81       	ld	r18, Z
  80:	2e 7f       	andi	r18, 0xFE	; 254
  82:	fc 01       	movw	r30, r24
  84:	20 83       	st	Z, r18
	PORTC |= (1<<0);
  86:	85 e3       	ldi	r24, 0x35	; 53
  88:	90 e0       	ldi	r25, 0x00	; 0
  8a:	25 e3       	ldi	r18, 0x35	; 53
  8c:	30 e0       	ldi	r19, 0x00	; 0
  8e:	f9 01       	movw	r30, r18
  90:	20 81       	ld	r18, Z
  92:	21 60       	ori	r18, 0x01	; 1
  94:	fc 01       	movw	r30, r24
  96:	20 83       	st	Z, r18
	DDRB |= (1<<0);
  98:	87 e3       	ldi	r24, 0x37	; 55
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	27 e3       	ldi	r18, 0x37	; 55
  9e:	30 e0       	ldi	r19, 0x00	; 0
  a0:	f9 01       	movw	r30, r18
  a2:	20 81       	ld	r18, Z
  a4:	21 60       	ori	r18, 0x01	; 1
  a6:	fc 01       	movw	r30, r24
  a8:	20 83       	st	Z, r18
	while(1)
		PORTB = (1<<0) & PINC;
  aa:	88 e3       	ldi	r24, 0x38	; 56
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	23 e3       	ldi	r18, 0x33	; 51
  b0:	30 e0       	ldi	r19, 0x00	; 0
  b2:	f9 01       	movw	r30, r18
  b4:	20 81       	ld	r18, Z
  b6:	21 70       	andi	r18, 0x01	; 1
  b8:	fc 01       	movw	r30, r24
  ba:	20 83       	st	Z, r18
  bc:	f6 cf       	rjmp	.-20     	; 0xaa <main+0x3e>

000000be <_exit>:
  be:	f8 94       	cli

000000c0 <__stop_program>:
  c0:	ff cf       	rjmp	.-2      	; 0xc0 <__stop_program>
