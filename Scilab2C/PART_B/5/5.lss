
5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000cc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000011  00000000  00000000  00000120  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000020  00000000  00000000  00000131  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000008d  00000000  00000000  00000151  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000004f  00000000  00000000  000001de  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000059  00000000  00000000  0000022d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000034  00000000  00000000  00000288  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000e3  00000000  00000000  000002bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000003b  00000000  00000000  0000039f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 64 00 	jmp	0xc8	; 0xc8 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <avr/io.h>
#define F_CPU 8000000

main(){
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
	DDRD |= (1 << 5);
  74:	81 e3       	ldi	r24, 0x31	; 49
  76:	90 e0       	ldi	r25, 0x00	; 0
  78:	21 e3       	ldi	r18, 0x31	; 49
  7a:	30 e0       	ldi	r19, 0x00	; 0
  7c:	f9 01       	movw	r30, r18
  7e:	20 81       	ld	r18, Z
  80:	20 62       	ori	r18, 0x20	; 32
  82:	fc 01       	movw	r30, r24
  84:	20 83       	st	Z, r18
	TCCR1A |= (1 << COM1A1) | (1 << WGM11);
  86:	8f e4       	ldi	r24, 0x4F	; 79
  88:	90 e0       	ldi	r25, 0x00	; 0
  8a:	2f e4       	ldi	r18, 0x4F	; 79
  8c:	30 e0       	ldi	r19, 0x00	; 0
  8e:	f9 01       	movw	r30, r18
  90:	20 81       	ld	r18, Z
  92:	22 68       	ori	r18, 0x82	; 130
  94:	fc 01       	movw	r30, r24
  96:	20 83       	st	Z, r18
	TCCR1B |= (1 << WGM13) | (1 << WGM12) | (1 << CS11);
  98:	8e e4       	ldi	r24, 0x4E	; 78
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	2e e4       	ldi	r18, 0x4E	; 78
  9e:	30 e0       	ldi	r19, 0x00	; 0
  a0:	f9 01       	movw	r30, r18
  a2:	20 81       	ld	r18, Z
  a4:	2a 61       	ori	r18, 0x1A	; 26
  a6:	fc 01       	movw	r30, r24
  a8:	20 83       	st	Z, r18
	ICR1 = 499;
  aa:	86 e4       	ldi	r24, 0x46	; 70
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	23 ef       	ldi	r18, 0xF3	; 243
  b0:	31 e0       	ldi	r19, 0x01	; 1
  b2:	fc 01       	movw	r30, r24
  b4:	31 83       	std	Z+1, r19	; 0x01
  b6:	20 83       	st	Z, r18
	OCR1A = 250;
  b8:	8a e4       	ldi	r24, 0x4A	; 74
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	2a ef       	ldi	r18, 0xFA	; 250
  be:	30 e0       	ldi	r19, 0x00	; 0
  c0:	fc 01       	movw	r30, r24
  c2:	31 83       	std	Z+1, r19	; 0x01
  c4:	20 83       	st	Z, r18
	while(1);
  c6:	ff cf       	rjmp	.-2      	; 0xc6 <main+0x5a>

000000c8 <_exit>:
  c8:	f8 94       	cli

000000ca <__stop_program>:
  ca:	ff cf       	rjmp	.-2      	; 0xca <__stop_program>
